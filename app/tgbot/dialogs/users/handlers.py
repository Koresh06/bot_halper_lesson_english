from typing import Any
from aiogram.types import Message, CallbackQuery, User
from aiogram_dialog.widgets.input import ManagedTextInput
from aiogram_dialog import DialogManager

from app.core.repo.requests import RequestsRepo
from app.core.models.user import StudyFormatEnum, TrainingFormatEnum
from app.settings import settings

from app.tgbot.dialogs.users.keyboard import new_user

# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–º–µ–Ω–∏
async def correct_name_handler(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
) -> None:

    await message.answer(text=f"–í–∞—à–µ –∏–º—è {text}")
    dialog_manager.dialog_data.update({"name": text})
    await dialog_manager.next()


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏
async def error_name_handler(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    error: ValueError,
):
    await message.answer(
        text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–º–µ–Ω–∏:\n1.–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã\n2. –î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤\n3. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã\n"
    )


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
async def correct_age_handler(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
) -> None:

    await message.answer(text=f"–í–∞–º {text}")
    dialog_manager.dialog_data.update({"age": text})
    await dialog_manager.next()


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def error_age_handler(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    error: ValueError,
):
    await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def correct_phone_handler(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
) -> None:

    await message.answer(text=f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {text}")
    dialog_manager.dialog_data.update({"phone": text})
    await dialog_manager.next()


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def error_phone_handler(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    error: ValueError,
):
    await message.answer(
        text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
    )


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–ª—å –æ–±—É—á–µ–Ω–∏—è
async def correct_study_goal_handler(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
) -> None:

    await message.answer(text=f"–í–∞—à —Ü–µ–ª—å {text}")
    dialog_manager.dialog_data.update({"study_goal": text})
    await dialog_manager.next()


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–∏ÃÜ —Ü–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è
async def error_study_goal_handler(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    error: ValueError,
):
    await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–ª—å –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def has_studied_before_handler(
    callback: CallbackQuery, widget: ManagedTextInput, dialog_manager: DialogManager
) -> None:
    has_studied_before = callback.data

    if has_studied_before == "yes":
        dialog_manager.dialog_data.update({"has_studied_before": True})
    elif has_studied_before == "no":
        dialog_manager.dialog_data.update({"has_studied_before": False})
    else:
        await callback.message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    await dialog_manager.next()


async def study_format_handler(
    callback: CallbackQuery,
    widget: Any,
    dialog_manager: DialogManager,
):
    study_format = callback.data

    if study_format == StudyFormatEnum.ONLINE.value:
        dialog_manager.dialog_data.update({"study_format": StudyFormatEnum.ONLINE})
    elif study_format == StudyFormatEnum.OFFLINE.value:
        dialog_manager.dialog_data.update({"study_format": StudyFormatEnum.OFFLINE})
    else:
        await callback.message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è.")
        return

    await dialog_manager.next()


async def training_handler(
    callback: CallbackQuery,
    widget: Any,
    dialog_manager: DialogManager,
):
    repo: RequestsRepo = dialog_manager.middleware_data.get("repo")

    training_format = callback.data

    if training_format == TrainingFormatEnum.GROUP.value:
        dialog_manager.dialog_data.update({"training_format": TrainingFormatEnum.GROUP})
    elif training_format == TrainingFormatEnum.PAIR.value:
        dialog_manager.dialog_data.update({"training_format": TrainingFormatEnum.PAIR})
    elif training_format == TrainingFormatEnum.INDIVIDUAL.value:
        dialog_manager.dialog_data.update(
            {"training_format": TrainingFormatEnum.INDIVIDUAL}
        )
    else:
        await callback.message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return

    await repo.users.add_user(
        tg_id=callback.from_user.id,
        username=callback.from_user.username,
        data=dialog_manager.dialog_data,
    )

    data = dialog_manager.dialog_data

    await callback.message.bot.send_message(
        chat_id=settings.bot.admin_ids,
        text=(
            f"üë§ *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*\n"
            f"   ‚Äî –ò–º—è: *{data['name']}*\n"
            f"   ‚Äî –í–æ–∑—Ä–∞—Å—Ç: *{data['age']}*\n"
            f"   ‚Äî ‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: *{data['phone']}*\n\n"
            f"üéØ *–¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è:*\n"
            f"   ‚Äî *{data['study_goal']}*\n\n"
            f"üìö *–§–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è:*\n"
            f"   ‚Äî *{data['study_format'].value}*\n"
            f"üèãÔ∏è *–í–∏–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n"
            f"   ‚Äî *{data['training_format'].value}*" 
        ),
        parse_mode="Markdown",
        reply_markup=await new_user(
            tg_id=callback.from_user.id,
            name=data["name"],
        )
    )

    await dialog_manager.done()
    await callback.message.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É. –û–∂–∏–¥–∞–∏ÃÜ—Ç–µ –∑–≤–æ–Ω–∫–∞")
